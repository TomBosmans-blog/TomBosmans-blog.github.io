import{_ as n,c as e,o as s,a}from"./app.ead78b55.js";const b='{"title":"Use nix as development environment.","description":"","frontmatter":{"sidebar":false},"headers":[{"level":2,"title":"shell.nix","slug":"shell-nix"},{"level":2,"title":"Autoload dev environment","slug":"autoload-dev-environment"}],"relativePath":"articles/2022-04-20-use-nix-as-dev-env.md","lastUpdated":null}',o={},t=a(`<h1 id="use-nix-as-development-environment" tabindex="-1">Use nix as development environment. <a class="header-anchor" href="#use-nix-as-development-environment" aria-hidden="true">#</a></h1><p>Nix is a tool that takes a unique approach to package management and system configuration. It can be used to replace <code>brew</code> on macos with the benefit to setup dev environemnts per project. For more info about nix: <a href="https://nixos.org/" target="_blank" rel="noopener noreferrer">https://nixos.org/</a></p><h2 id="shell-nix" tabindex="-1">shell.nix <a class="header-anchor" href="#shell-nix" aria-hidden="true">#</a></h2><p>We are going to setup a dev environment for a node project using postgres in this example. In the project root add a new file named <code>shell.nix</code>.</p><div class="language-nix line-numbers-mode"><pre><code><span class="token keyword">with</span> <span class="token punctuation">(</span><span class="token function">import</span> <span class="token operator">&lt;</span>nixpkgs<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mkShell <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">&quot;My node project&quot;</span><span class="token punctuation">;</span>
  buildInputs <span class="token operator">=</span> <span class="token punctuation">[</span>
    postgresql_13
    nodejs<span class="token operator">-</span>16_x
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  PGDATA <span class="token operator">=</span> <span class="token string">&quot;<span class="token interpolation"><span class="token antiquotation important">$</span><span class="token punctuation">{</span><span class="token function">toString</span> <span class="token url">./.</span><span class="token punctuation">}</span></span>/.pg&quot;</span><span class="token punctuation">;</span>

  shellHook <span class="token operator">=</span> <span class="token string">&#39;&#39;
    export PGHOST=&quot;$PGDATA&quot;
    export PGUSER=&quot;postgres&quot;
    [ ! -d $PGDATA ] &amp;&amp; pg_ctl initdb -o &quot;-U postgres&quot;
  &#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>So when we now run <code>nix-shell</code> it will create a <code>.pg/</code> folder with everything we need to run our postgres server. We don&#39;t want to commit this in our git so add in your <code>.gitigore</code></p><div class="language-git line-numbers-mode"><pre><code>.pg
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="autoload-dev-environment" tabindex="-1">Autoload dev environment <a class="header-anchor" href="#autoload-dev-environment" aria-hidden="true">#</a></h2><p>You might notice that we always open a bash shell when running <code>nix-shell</code>, we can fix this and make the process of loading our dev environment automatic with <code>direnv</code>. First we need to install direnv with nix:</p><div class="language-shell line-numbers-mode"><pre><code>nix-env -i direnv
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Add a new <code>.envrc</code> file in the root of our project:</p><div class="language-shell line-numbers-mode"><pre><code>use_nix
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>If you are using <code>zsh</code> add the following to your <code>zshrc</code>:</p><div class="language-shell line-numbers-mode"><pre><code><span class="token builtin class-name">eval</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>direnv hook <span class="token function">zsh</span><span class="token variable">)</span></span>&quot;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>Now run the following in the root of your project:</p><div class="language-shell line-numbers-mode"><pre><code>direnv allow <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>And thats it, from now on when you <code>cd</code> into your project folder it will autmagicly load your dev environemnt.</p>`,17),p=[t];function r(i,l,c,d,u,m){return s(),e("div",null,p)}var h=n(o,[["render",r]]);export{b as __pageData,h as default};
